# Nome do Workflow
name: DevOpsLab Pipeline

# Evento que irá acionar a pipeline
on: 
  push:
    branches:
      - main

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Requirements (Sonar Necessities)
      run: pip install -r requirements.txt

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@v4
      with:
        args: >
          -Dsonar.projectKey=leosilvasouza_devopslab
          -Dsonar.organization=leosilvasouza
          -Dsonar.sources=.
          -Dsonar.host.url=https://sonarcloud.io
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true
        
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Download do Repositório
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Requirements
        run: pip install -r requirements.txt
        
      - name: Install Requirements
        run:  pip install flask flask-wtf pytest pytest-cov 
              
      - name: Unit Test
        run: |
          coverage run --source=app -m pytest test.py
          coverage report -m
          coverage xml -i

      - name: Login no Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: '${{ vars.GOOGLE_ARTIFACT }}'
          username: _json_key
          password: '${{ secrets.GOOGLE_CREDENTIALS }}'    

      - name: Build Image
        run: |
          docker build \
              --build-arg NEW_RELIC_LICENSE_KEY_ARG=${{ secrets.NEWRELIC_KEY }} \
              --build-arg NEWRELIC_ID_ARG=${{ vars.NEWRELIC_ID }} \
              -t ${{ vars.GOOGLE_ARTIFACT }}/${{ vars.GOOGLE_PROJECT_ID }}/${{ vars.GOOGLE_REPONAME }}/${{ vars.GOOGLE_MYAPP }}:latest \
              -f Dockerfile .

      - name: Push Image
        run: |
          docker push ${{ vars.GOOGLE_ARTIFACT }}/${{ vars.GOOGLE_PROJECT_ID }}/${{ vars.GOOGLE_REPONAME }}/${{ vars.GOOGLE_MYAPP }}:latest

  Deploy:
    needs: Build
    runs-on: ubuntu-latest
    outputs:
      deployment_url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: Download do Repositório
        uses: actions/checkout@v4       # https://github.com/actions/checkout

      - name: Login no GCP
        uses: 'google-github-actions/auth@v2' # https://github.com/google-github-actions/auth
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: Enable New Relic Agent to CiCd
        run: |
          curl -Ls https://download.newrelic.com/install/newrelic-cli/scripts/install.sh | bash && sudo NEW_RELIC_API_KEY=${{ secrets.NEWRELIC_KEY }} NEW_RELIC_ACCOUNT_ID=${{ vars.NEW_RELIC_ID}} /usr/local/bin/newrelic install -y --tag project:devosplab-impacta

      - name: Cloud Run Deploy
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v2'  # https://github.com/marketplace/actions/deploy-to-cloud-run
        with:
          service: ${{ vars.GOOGLE_MYAPP }}
          region: ${{ vars.GOOGLE_REGION }}
          image: ${{ vars.GOOGLE_ARTIFACT }}/${{ vars.GOOGLE_PROJECT_ID }}/${{ vars.GOOGLE_REPONAME }}/${{ vars.GOOGLE_MYAPP }}:latest
          flags: '--allow-unauthenticated'

      - name: Validando a API
        run: 'curl "${{ steps.deploy.outputs.url }}"'

      - name: Notificação Slack
        id: slack
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "DevOpsLab Pipeline leosilvasouza : ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "DevOpsLab Pipeline leosilvasouza: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NOTIFICATIONS_TOKEN }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK  

  DAST:
    needs: Deploy
    runs-on: ubuntu-latest
    permissions:
     contents: write
     issues: write
     pull-requests: write
     
    steps:   
      - name: ZAP Proxy Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: "${{ needs.Deploy.outputs.deployment_url }}"
          rules_file_name: '.zap/rules.json'

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: report.xml